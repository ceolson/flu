import deepchem as dc
import numpy as np
import tensorflow as tf
from tensorflow import keras
from deepchem.utils.genomics import encode_fasta_sequence
from Bio import SeqIO
from IPython.display import Markdown
import scipy
import h5py

np.set_printoptions(threshold=np.inf)


# https://www.ncbi.nlm.nih.gov/Class/FieldGuide/BLOSUM62.txt
BLOSUM = {
'A':   [ 4,   -1,   -2,   -2,    0,   -1,   -1,    0,   -2,   -1,   -1,   -1,   -1,   -2,   -1,    1,    0,   -3,   -2,    0,   -2,   -1,    0,   -4],
'R':   [-1,    5,    0,   -2,   -3,    1,    0,   -2,    0,   -3,   -2,    2,   -1,   -3,   -2,   -1,   -1,   -3,   -2,   -3,   -1,    0,   -1,   -4],
'N':   [-2,    0,    6,    1,   -3,    0,    0,    0,    1,   -3,   -3,    0,   -2,   -3,   -2,    1,    0,   -4,   -2,   -3,    3,    0,   -1,   -4],
'D':   [-2,   -2,    1,    6,   -3,    0,    2,   -1,   -1,   -3,   -4,   -1,   -3,   -3,   -1,    0,   -1,   -4,   -3,   -3,    4,    1,   -1,   -4],
'C':   [ 0,   -3,   -3,   -3,    9,   -3,   -4,   -3,   -3,   -1,   -1,   -3,   -1,   -2,   -3,   -1,   -1,   -2,   -2,   -1,   -3,   -3,   -2,   -4],
'Q':   [-1,    1,    0,    0,   -3,    5,    2,   -2,    0,   -3,   -2,    1,    0,   -3,   -1,    0,   -1,   -2,   -1,   -2,    0,    3,   -1,   -4],
'E':   [-1,    0,    0,    2,   -4,    2,    5,   -2,    0,   -3,   -3,    1,   -2,   -3,   -1,    0,   -1,   -3,   -2,   -2,    1,    4,   -1,   -4],
'G':   [ 0,   -2,    0,   -1,   -3,   -2,   -2,    6,   -2,   -4,   -4,   -2,   -3,   -3,   -2,    0,   -2,   -2,   -3,   -3,   -1,   -2,   -1,   -4],
'H':   [-2,    0,    1,   -1,   -3,    0,    0,   -2,    8,   -3,   -3,   -1,   -2,   -1,   -2,   -1,   -2,   -2,    2,   -3,    0,    0,   -1,   -4],
'I':   [-1,   -3,   -3,   -3,   -1,   -3,   -3,   -4,   -3,    4,    2,   -3,    1,    0,   -3,   -2,   -1,   -3,   -1,    3,   -3,   -3,   -1,   -4],
'L':   [-1,   -2,   -3,   -4,   -1,   -2,   -3,   -4,   -3,    2,    4,   -2,    2,    0,   -3,   -2,   -1,   -2,   -1,    1,   -4,   -3,   -1,   -4],
'K':   [-1,    2,    0,   -1,   -3,    1,    1,   -2,   -1,   -3,   -2,    5,   -1,   -3,   -1,    0,   -1,   -3,   -2,   -2,    0,    1,   -1,   -4],
'M':   [-1,   -1,   -2,   -3,   -1,    0,   -2,   -3,   -2,    1,    2,   -1,    5,    0,   -2,   -1,   -1,   -1,   -1,    1,   -3,   -1,   -1,   -4],
'F':   [-2,   -3,   -3,   -3,   -2,   -3,   -3,   -3,   -1,    0,    0,   -3,    0,    6,   -4,   -2,   -2,    1,    3,   -1,   -3,   -3,   -1,   -4],
'P':   [-1,   -2,   -2,   -1,   -3,   -1,   -1,   -2,   -2,   -3,   -3,   -1,   -2,   -4,    7,   -1,   -1,   -4,   -3,   -2,   -2,   -1,   -2,   -4],
'S':   [ 1,   -1,    1,    0,   -1,    0,    0,    0,   -1,   -2,   -2,    0,   -1,   -2,   -1,    4,    1,   -3,   -2,   -2,    0,    0,    0,   -4],
'T':   [ 0,   -1,    0,   -1,   -1,   -1,   -1,   -2,   -2,   -1,   -1,   -1,   -1,   -2,   -1,    1,    5,   -2,   -2,    0,   -1,   -1,    0,   -4],
'W':   [-3,   -3,   -4,   -4,   -2,   -2,   -3,   -2,   -2,   -3,   -2,   -3,   -1,    1,   -4,   -3,   -2,   11,    2,   -3,   -4,   -3,   -2,   -4],
'Y':   [-2,   -2,   -2,   -3,   -2,   -1,   -2,   -3,    2,   -1,   -1,   -2,   -1,    3,   -3,   -2,   -2,    2,    7,   -1,   -3,   -2,   -1,   -4],
'V':   [ 0,   -3,   -3,   -3,   -1,   -2,   -2,   -3,   -3,    3,    1,   -2,    1,   -1,   -2,   -2,    0,   -3,   -1,    4,   -3,   -2,   -1,   -4],
'B':   [-2,   -1,    3,    4,   -3,    0,    1,   -1,    0,   -3,   -4,    0,   -3,   -3,   -2,    0,   -1,   -4,   -3,   -3,    4,    1,   -1,   -4],
'Z':   [-1,    0,    0,    1,   -3,    3,    4,   -2,    0,   -3,   -3,    1,   -1,   -3,   -1,    0,   -1,   -3,   -2,   -2,    1,    4,   -1,   -4],
'X':   [ 0,   -1,   -1,   -1,   -2,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -2,    0,    0,   -2,   -1,   -1,   -1,   -1,   -1,   -4],
'-':   [-4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,   -4,    1]
}

CATEGORIES = {
'A': [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
'R': [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'N': [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'D': [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'C': [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'Q': [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'E': [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'G': [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'H': [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'I': [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], 
'L': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
'K': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
'M': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
'F': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
'P': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.], 
'S': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
'T': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.], 
'W': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.], 
'Y': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.], 
'V': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
'X': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
'-': [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
}

ORDER = ['A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V','X','-']


# Read om fastas
fastas = SeqIO.parse('/projects/ml/flu/fludb_data/525916981168-ProteinFastaResults.fasta','fasta')
arr = [line for line in fastas]
arr_new = []

# Reject sequences without a subtype
for elt in arr:
    try:
        int(elt.id[1])
        arr_new.append(elt)
    except:
        pass

# Shuffle and trim off beginings of sequences
rand_arr_new = np.random.permutation(arr_new)
for sequence in rand_arr_new:
    sequence.seq = sequence.seq[15:]

# Split into batches of 2500 for alignment
split_up = []
count = 0
while count < len(arr_new):
    try:
        split_up.append(rand_arr_new[count:count + 2500])
    except IndexError:
        split_up.append(rand_arr_new[count:])
    count += 2500

# Output files
for i in range(len(split_up)):
    SeqIO.write(split_up[i].tolist(),'/projects/ml/flu/fludb_data/alignment_temp_files/split{}.fasta'.format(i),'fasta')

# Run MUSCLE
for i in range(len(split_up)):
    command = Bio.Align.Applications.MuscleCommandline(input='/projects/ml/flu/fludb_data/alignment_temp_files/split{}.fasta'.format(i),out='/projects/ml/flu/fludb_data/alignment_temp_files/split{}.aln'.format(i))
    _ = command()
